#!/usr/bin/env python3

# From grok: https://grok.com/share/c2hhcmQtMg%3D%3D_e003ccb9-7bb5-4e81-9afc-6223a8711269
# Step 1: Define the .proto file (save as dots.proto)
# Step 2: Generate Python code from dots.proto
# Run in terminal: protoc --python_out=. dots.proto
# This creates dots_pb2.py

# Step 3: Python code to write and read 2D positions
import os
import json
import argparse
import dots_pb2 # generated by step 2



# Writing 2D positions to a file
def write_positions(data_raw, filename="dots.bin"):
    dataset = dots_pb2.Dataset()
    for trial_raw in data_raw:
        trial = dataset.trials.add()

        if 'probes' in trial_raw:
            for (t, o) in trial_raw['probes']:
                probe = trial.probes.add()
                probe.frame = t
                probe.obj = o

        if 'disappear' in trial_raw:
            trial.disappear = trial_raw['disappear']

        positions = trial_raw['positions']
        for step_raw in positions:
            step = trial.steps.add()
            for x, y in step_raw:
                dot = step.dots.add()
                dot.x = x
                dot.y = y

    with open(filename, "wb") as f:
        f.write(dataset.SerializeToString())
    print(f"Wrote {len(data_raw)} trials to {filename}")

# Reading 2D positions from a file
def read_positions(filename="dots.bin"):
    dataset = dots_pb2.Dataset()
    with open(filename, "rb") as f:
        dataset.ParseFromString(f.read())

    positions = [
        [
            [
                [dot.x,
                 dot.y] for dot in step.dots
            ] for step in trial.steps
        ] for trial in dataset.trials
    ]
    print(f"Read {len(positions)} positions from {filename}")
    return positions

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Converts json to protobuff",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("dataset", type=str,
                        help="Which scene dataset to use")
    args = parser.parse_args()
    raw = []
    with open(args.dataset, "r") as f:
        try:
            raw = json.load(f)
        except:
            print(f'Could not interpret entry {args.dataset}')

    # Write to file
    dataset_name, _ = os.path.splitext(os.path.basename(args.dataset))
    outpath = f'../assets/{dataset_name}.bin'
    write_positions(raw, outpath)

    # Read from file
    loaded_positions = read_positions(outpath)
    print("Original positions:", raw[-1]['positions'][-1])
    print("Loaded positions:", loaded_positions[-1][-1])
